package com.wukesly.moduleofbluetooth;



import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.UUID;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

/**
 * ï¿½ï¿½ï¿½ï¿½Í¨Ñ¶ï¿½ï¿½
 */
public class BluetoothSharingService {
    // Debugging
    private static final String TAG = "BluetoothChatService";
    private static final boolean D = true;

    // Name for the SDP record when creating server socket
    private static final String NAME = "BluetoothChat";

    // Unique UUID for this application
    private static final UUID MY_UUID = UUID.fromString("fa87c0d0-afac-11de-8a39-0800200c9a66");

    // Member fields
    private final BluetoothAdapter mAdapter;
    /**
     * ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
     */
    private final Handler mHandler;
    /**
     * ï¿½È´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß³ï¿½
     */
    private AcceptThread mAcceptThread;
    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½è±¸ï¿½ß³ï¿½
     */
    private ConnectThread mConnectThread;
    /**
     * Í¨Ñ¶ï¿½ß³ï¿½
     */
    private CommunicationThread mCommunicationThread;
    /**
     * Í¨Ñ¶×´Ì¬
     */
    private int mState;

    // ×´Ì¬ï¿½ï¿½ï¿½ï¿½
    public static final int STATE_NONE = 0;       // ï¿½ï¿½Ê¼×´Ì¬
    public static final int STATE_LISTEN = 1;     // ï¿½ï¿½ï¿½ï¿½ï¿½â²¿ï¿½ï¿½ï¿½ï¿½×´Ì¬
    public static final int STATE_CONNECTING = 2; // ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â²¿ï¿½è±¸×´Ì¬
    public static final int STATE_CONNECTED = 3;  // ï¿½ï¿½ï¿½Óµï¿½ï¿½â²¿ï¿½è±¸

    /**
     * ï¿½ï¿½ï¿½ìº¯ï¿½ï¿½
     * @param context  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @param handler  ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â²¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     */
    public BluetoothSharingService(Context context, Handler handler) {
        mAdapter = BluetoothAdapter.getDefaultAdapter();
        mState = STATE_NONE;
        mHandler = handler;
    }

    /**
     * ï¿½ï¿½ï¿½Ãµï¿½Ç°ï¿½ï¿½×´Ì¬
     * @param state  An integer defining the current connection state
     */
    private synchronized void setState(int state) {
        if (D) Log.d(TAG, "setState() " + mState + " -> " + state);
        mState = state;
        // ï¿½ï¿½ï¿½Íµï¿½Ç°×´Ì¬
        mHandler.obtainMessage(Cconst.MESSAGE_STATE_CHANGE, state, -1).sendToTarget();
    }

    /**
     * ï¿½ï¿½È¡×´Ì¬.
      */
    public synchronized int getState() {
        return mState;
    }

    /**
     * ï¿½ï¿½ï¿½ï¿½Í¨Ñ¶ï¿½ï¿½ï¿½ñ£¬¼ï¿½ï¿½ï¿½ï¿½Ç·ï¿½ï¿½ï¿½ï¿½â²¿ï¿½ï¿½ï¿½ï¿½
     */
    public synchronized void start() {
        if (D) Log.d(TAG, "start");

        // È¡ï¿½ï¿½Ò»ï¿½Ð³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½â²¿ï¿½è±¸ï¿½ï¿½ï¿½ß³ï¿½
        if (mConnectThread != null){
        	mConnectThread.cancel(); 
        	mConnectThread = null;
        	}
        // È¡ï¿½ï¿½Ò»ï¿½ï¿½Í¨Ñ¶ï¿½ß³ï¿½
        if (mCommunicationThread != null){
        	mCommunicationThread.cancel(); 
        	mCommunicationThread = null;
        	}
        //ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½
        if (mAcceptThread == null) {
            mAcceptThread = new AcceptThread();
            mAcceptThread.start();
        }
        setState(STATE_LISTEN);
    }

    /**
     * ï¿½ï¿½Ê¼Ò»ï¿½ï¿½ï¿½ï¿½ï¿½Ó£ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½â²¿ï¿½è±¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @param device  ï¿½ï¿½ï¿½ï¿½ï¿½Óµï¿½ï¿½ï¿½ï¿½è±¸ï¿½ï¿½Ô¶ï¿½ï¿½ï¿½è±¸ï¿½ï¿½
     */
    public synchronized void connect(BluetoothDevice device) {
        if (D) Log.d(TAG, "connect to: " + device);

        // È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß³ï¿½
        if (mAdapter.getState() == STATE_CONNECTING) {
            if (mConnectThread != null) {
            	mConnectThread.cancel(); 
            	mConnectThread = null;
            	}
        }
        // È¡ï¿½ï¿½Í¨Ñ¶ï¿½ß³ï¿½
        if (mCommunicationThread != null) {
        	mCommunicationThread.cancel(); 
        	mCommunicationThread = null;
        	}
        // ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½è±¸
        mConnectThread = new ConnectThread(device);
        mConnectThread.start();
        setState(STATE_CONNECTING);
    }

    /**
     * ï¿½ï¿½Ê¼Í¨Ñ¶ï¿½ï¿½ï¿½ñ£¬¹ï¿½ï¿½ï¿½Í¨Ñ¶ï¿½ï¿½Socket
     * @param socket  ï¿½ï¿½ï¿½Óµï¿½Socket
     * @param device  ï¿½ï¿½ï¿½Óµï¿½ï¿½ï¿½ï¿½è±¸
     */
    public synchronized void communication(BluetoothSocket socket, BluetoothDevice device) {
        if (D) Log.d(TAG, "connected");

        // È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß³ï¿½
        if (mConnectThread != null) {
        	mConnectThread.cancel(); 
        	mConnectThread = null;
        	}
        // È¡ï¿½ï¿½Í¨Ñ¶ï¿½ß³ï¿½
        if (mCommunicationThread != null) {
        	mCommunicationThread.cancel();
        	mCommunicationThread = null;
        	}
        // È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß³ï¿½
        if (mAcceptThread != null) {
        	mAcceptThread.cancel(); 
        	mAcceptThread = null;
        	}
        // ï¿½ï¿½ï¿½ï¿½
        mCommunicationThread = new CommunicationThread(socket);
        mCommunicationThread.start();

        // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢
        Message msg = mHandler.obtainMessage(Cconst.MESSAGE_DEVICE_NAME);
        Bundle bundle = new Bundle();
        bundle.putString(Cconst.DEVICE_NAME, device.getName());
        msg.setData(bundle);
        mHandler.sendMessage(msg);
        setState(STATE_CONNECTED);
    }

    /**
     * Í£Ö¹ï¿½ï¿½ï¿½ï¿½ï¿½ß³ï¿½
     */
    public synchronized void stop() {
        if (D) Log.d(TAG, "stop");
        if (mConnectThread != null) {
        	mConnectThread.cancel(); 
        	mConnectThread = null;
        	}
        if (mCommunicationThread != null) {
        	mCommunicationThread.cancel(); 
        	mCommunicationThread = null;
        	}
        if (mAcceptThread != null) {
        	mAcceptThread.cancel();
        	mAcceptThread = null;}
        setState(STATE_NONE);
    }
    
    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îªtype,ï¿½ï¿½ï¿½ï¿½Îªattr,ï¿½ï¿½ï¿½ï¿½Î»dataï¿½ï¿½Ö¡ï¿½ï¿½ï¿?
     * @param type ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @param attr ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @param data ï¿½ï¿½ï¿½ï¿½ï¿½Ö½ï¿½ï¿½ï¿½
     * @return ï¿½ï¿½(type+dataLen+attrLen+attr+data)
     */
    public byte[] Packaging(int type,String attr,byte[] data)
    {
    	Log.i("Packagibf", attr+type);
    	int attrLen = attr.length();
    	int dataLen = data.length;
    	//Log.i("Packag", "type is "+type+"	atte is "+attr+"	datalen is "+data);
    	if(type<0||attrLen<=0||dataLen<=0){
    		//ï¿½ï¿½ï¿½Ý²ï¿½ï¿½Ï·ï¿½
    		return null;
    	}else{
    		//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½Îªï¿½Ö½ï¿½ï¿½ï¿½ï¿½ï¿½
    		byte Btype = (byte)(type&0xff);
    		byte[] BdataLen = new byte[4];
    		BdataLen = IntToBytes(dataLen);
    		//Log.i("Bdatalen", ""+(int)BdataLen[3]+"&&"+(int)BdataLen[2]+"&&"+(int)BdataLen[1]+"&&"+(int)BdataLen[0]);
    		
    		//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    		byte[] Battr;
			try {
				Battr = attr.getBytes(Cconst.DECODE);
				attrLen = Battr.length;
				//ï¿½ï¿½ï¿½Ô³ï¿½ï¿½ï¿½×ªï¿½ï¿½Îªï¿½Ö½ï¿½ï¿½ï¿½ï¿½ï¿½
	    		byte BattrLen = (byte)(attrLen&0xff);
				Log.i("Attr","attr is "+new String(Battr,Cconst.DECODE)+"&&"+attrLen+"&&"+Battr.length);
				//new byte[attrLen];
	    		//Battr = attr.getBytes();
	    		//ï¿½ï¿½ï¿?:ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½+ï¿½ï¿½ï¿½ï¿½
	    		int len = 1+4+1+attrLen+dataLen;
	    		byte[] bag = new byte[len];
	    		bag[0] = Btype;
	    		System.arraycopy(BdataLen, 0, bag, 1, 4);
	    		bag[5] = BattrLen;
	    		System.arraycopy(Battr, 0, bag, 6, attrLen);
	    		System.arraycopy(data, 0, bag, 6+attrLen, dataLen);
	    		//Log.i("Packagibf",""+bag.length);
	    		return bag;
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return null;
			} 
    	}
    }
    
    /**
     * ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½Îª4ï¿½Ö½Úµï¿½byteï¿½ï¿½ï¿½ï¿½
     * @param num ï¿½ï¿½ï¿½ï¿½
     * @return 4ï¿½Ö½ï¿½ï¿½ï¿½ï¿½ï¿½
     */
    public byte[] IntToBytes(int num)
    {
    	byte[] bytes = new byte[4];
    	bytes[3] = bytes[2] = bytes[1] = bytes[0] = 0;
		//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½Îª4ï¿½Ö½Úµï¿½ï¿½Ö½ï¿½ï¿½ï¿½ï¿½ï¿½
		bytes[3] = (byte)((num>>24)&0xff);
		bytes[2] = (byte)((num>>16)&0xff);
		bytes[1] = (byte)((num>>8)&0xff);
		bytes[0] = (byte)(num&0xff);
    	return bytes;
    }
    
    /**
     * ï¿½ï¿½4ï¿½Ö½Úµï¿½byteï¿½ï¿½ï¿½ï¿½×ªï¿½ï¿½Îªï¿½Þ·ï¿½ï¿½Åµï¿½ï¿½ï¿½ï¿½ï¿½
     * @param bytes 4ï¿½Ö½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @return ï¿½ï¿½ï¿½ï¿½
     */
    public int BytesToInt(byte[] bytes)
    {
    	int num = 0;
    	//datalen = Integer.parseInt(new String(buff, 0, 4));
		//Ç°ï¿½ï¿½ï¿½ï¿½ï¿½â£¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½127Ê±ï¿½ï¿½ï¿½Ö½ï¿½ï¿½ï¿½ï¿½Î»Î?1ï¿½ï¿½Ä¬ï¿½ï¿½Îªï¿½Ð·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô³ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
		//ByteArrayInputStream ins = new ByteArrayInputStream(buff);
		for(int i=0;i<4;i++)
		{
			
			num = num+(bytes[i]&0xff)*(int)Math.pow(2, 8*i);
			Log.i("datalen"+i, ""+num);
		}
		return num;
    }
    
    /**
     * ï¿½ï¿½ï¿½Ö½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í³ï¿½type+dataLen+attrLen+attr+dataï¿½ï¿½Ê½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú·ï¿½ï¿½Øµï¿½Bundleï¿½ï¿½
     * @param data ï¿½Ö½ï¿½ï¿½ï¿½
     * @return ï¿½Ö½ï¿½ï¿½ï¿½ï¿½Ç¿Õ£ï¿½ï¿½ï¿½ï¿½ï¿½Bundleï¿½ï¿½ï¿½ï¿½ï¿½ò·µ»ï¿½null.
     * @serialData ï¿½ï¿½Öµ DATA_TYPE ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½Íµï¿½type;
     * @serialData DATA_DATALEN ï¿½ï¿½Ó¦ï¿½ï¿½ï¿½Íµï¿½datalen;
     * @serialData DATA_ATTRLENï¿½ï¿½Ó¦ï¿½ï¿½ï¿½Íµï¿½dataLen
     * @serialData DATA_ATTRï¿½ï¿½Ó¦ï¿½Ö·ï¿½ï¿½ï¿½ï¿½Ôµï¿½attr
     * @serialData DATA_DATAï¿½ï¿½Ó¦ï¿½Ö½ï¿½ï¿½ï¿½ï¿½Íµï¿½data
     */
    public Bundle ParseData(byte[] byteStream)
    {
    	if(byteStream==null){
    		return null;
    	}else if(byteStream.length<=0){
    		return null;
    	}else{
    		int type = (int)byteStream[0];//Integer.parseInt(new String(byteStream, 0, 1));
    		int dataLen = 0;// = Integer.parseInt(new String(byteStream, 1, 4));
    		byte[] b = new byte[4];
    		System.arraycopy(byteStream, 1, b, 0, 4);
    		dataLen = BytesToInt(b);
    		int attrLen =(int)(byteStream[5]); //Integer.parseInt(new String(byteStream, 5, 1));
    		Log.i("Parse", "type@"+type+"datalen@"+dataLen+"attrlen"+attrLen);
    		if(type<0||attrLen<=0||dataLen<=0){
    			//ï¿½ï¿½ï¿½Ý²ï¿½ï¿½Ï·ï¿½
        		return null;
    		}else{
    			Bundle bundle = new Bundle();
    			String attr;
				try {
					attr = new String(byteStream, 6, attrLen,Cconst.DECODE);
					Log.i("Parse","attr is" +attr+"&&datalen is "+dataLen);
	    			byte[] data = new byte[dataLen];
	    			System.arraycopy(byteStream, 6+attrLen, data, 0, dataLen);
	    			bundle.putInt(Cconst.DATA_TYPE, type);
	    			bundle.putInt(Cconst.DATA_DATALEN, dataLen);
	    			bundle.putInt(Cconst.DATA_ATTRLEN, attrLen);
	    			bundle.putString(Cconst.DATA_ATTR, attr);
	    			bundle.putByteArray(Cconst.DATA_DATA, data);
	    			Log.i("parse", "Out");
	    			return bundle;
				} catch (UnsupportedEncodingException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					return null;
				}
    		}
    	}	
    }
    
    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½ï¿½
     * @param bag ï¿½ï¿½Ï¢ï¿½ï¿½ï¿½Ö½ï¿½ï¿½ï¿½
     * @return ï¿½É¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È£ï¿½ï¿½ñ·µ»ï¿½-1
     */
    public int SendData(byte[] bag)
    {
    	//Log.i("SendData", "ï¿½ï¿½ï¿½Ý³ï¿½ï¿½ï¿½"+bag.length+"&&&ï¿½ï¿½ï¿½ï¿½"+new String(bag)+"%%State"+mState);
    	// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½
        CommunicationThread r;
        // Í¬ï¿½ï¿½ï¿½ï¿½ÖµÍ¨Ñ¶ï¿½ß³ï¿½
        synchronized (this) 
        {
            if (mState != STATE_CONNECTED||bag.length<=0) 
            	{
            	Log.i("SendData", "State11"+mState);
            		return -1;
            	}
            Log.i("SendData", "State12"+mState);
            r = mCommunicationThread;
        }
        //Í¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
        r.write(bag);
    	return bag.length;
    }

    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Õ¸ï¿½Ê½(type+dataLen+attrLen+attr+data)ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½
     * @param in ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @return ï¿½É¹ï¿½ï¿½ï¿½ï¿½Ø´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ýµï¿½Bundle,ï¿½ï¿½ï¿½ò·µ»ï¿½null
     */
    private  Bundle ReadData(InputStream in)
    {
    	Bundle bundle = null;
    	if(in!=null){
    		int type = -1;
    		int datalen = 0;
    		int attrLen = -1;
    		byte[] buff = new byte[4];
    		buff[0] = buff[1] = buff[2] = buff[3] = 0;
    		try {
    			type = in.read();
    			if(type>1)
    				return null;
				Log.i("Read1", "type"+type);
				if(in.read(buff, 0, 4)==4){
					Log.i("buff", ""+buff);
					datalen = BytesToInt(buff);
					Log.i("Read2", "datalen"+datalen+"buff"+buff);
					if(datalen>0){
						attrLen = in.read();
						Log.i("Read3", "attrlen"+attrLen);
						if(attrLen>0){
							int len = 1+4+1+datalen+attrLen;
							Log.i("Read31", "len"+len);
							byte[] data = new byte[len];
							data[0] = (byte)(type&0xff);
							Log.i("Read32", "data[0]"+(int)data[0]);
							System.arraycopy(buff, 0, data, 1, 4);
							data[5] = (byte)(attrLen&0xff);
							in.read(data, 6, attrLen+datalen);
							Log.i("Read4", "data"+data);
							//in.close();
							return ParseData(data);
						}else{
							
						}//ï¿½ï¿½ï¿½Ô³ï¿½ï¿½È¶ï¿½È¡ï¿½ì³£
					}else{
						
					}//ï¿½ï¿½ï¿½Ý³ï¿½ï¿½ï¿½ï¿½ì³£
				}else{
					
				}//ï¿½ï¿½ï¿½Ý³ï¿½ï¿½È¶ï¿½È¡ï¿½ì³£
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				Log.e("ReadData", "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç´ï¿½ï¿½ï¿½");
				return null;
			}
    	}else{
    		
    	}//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ì³£
    	return bundle;
    }
    
  
    
    /**
     * ï¿½Ð¶ï¿½Socketï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×´Ì¬
     * @return ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×´Ì¬ ï¿½ï¿½ï¿½ï¿½true,ï¿½ï¿½ï¿½ò·µ»ï¿½false
     */
    private boolean SocketIsConn(BluetoothSocket socket){
    	boolean state = true;
    	if(socket!=null){
    		try {
				socket.getOutputStream().write(0xff);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				state = false;
			}
    	}else{
    		state = false;
    	}
    	
    	return state;
    }
    
    
    
    /**
     * Í¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
     * @param ï¿½ï¿½ï¿½Íµï¿½ï¿½ï¿½ï¿½ï¿½
     * @see CommunicationThread#write(byte[])
     */
    public void write(byte[] out) {
        // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½
        CommunicationThread r;
        // Í¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
        synchronized (this) {
            if (mState != STATE_CONNECTED) return;
            r = mCommunicationThread;
        }
        // ï¿½ï¿½ï¿½ï¿½
        //Log.i("Write", ""+new String(out));
        r.write(out);
        }

    /**
     * ï¿½ï¿½ï¿½ï¿½Ê§ï¿½ï¿½
     */
    private void connectionFailed() {
    	setState(STATE_LISTEN);
        // ï¿½ï¿½ï¿½ï¿½Ê§ï¿½ï¿½ï¿½ï¿½Ï¢
        Message msg = mHandler.obtainMessage(Cconst.MESSAGE_TOAST);
        Bundle bundle = new Bundle();
        bundle.putString(Cconst.TOAST, "Unable to connect device");
        msg.setData(bundle);
        mHandler.sendMessage(msg);
    }

    /**
     * ï¿½ï¿½ï¿½Ó¶ï¿½Ê§
     */
    private void connectionLost() {
        setState(STATE_LISTEN);

        Log.i("Lost", "001");
        if(mCommunicationThread!=null){
        	mCommunicationThread.cancel();
        	mCommunicationThread = null;
        }
        Log.i("Lost", "002");
        start();
        // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢
        Message msg = mHandler.obtainMessage(Cconst.MESSAGE_TOAST);
        Bundle bundle = new Bundle();
        bundle.putString(Cconst.TOAST, "Device connection was lost");
        msg.setData(bundle);
        Log.i("Lost", "002");
        mHandler.sendMessage(msg);
    }

    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½ß³ï¿½
     */
    private class AcceptThread extends Thread {
        // ï¿½ï¿½ï¿½ï¿½Socket
        private final BluetoothServerSocket mmServerSocket;
        public AcceptThread() {
            BluetoothServerSocket tmp = null;

            // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½socket
            try {
                tmp = mAdapter.listenUsingRfcommWithServiceRecord(NAME, MY_UUID);
            } catch (IOException e) {
                Log.e(TAG, "listen() failed", e);
            }
            mmServerSocket = tmp;
        }

        public void run() {
            if (D) Log.d(TAG, "BEGIN mAcceptThread" + this);
            setName("AcceptThread");
            BluetoothSocket socket = null;

            // ï¿½ï¿½ï¿½Î´ï¿½ï¿½ï¿½Ó£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
            while (mState != STATE_CONNECTED) {
                try {
                    // Ö±ï¿½ï¿½ï¿½ï¿½ï¿½Ø£ï¿½ï¿½ï¿½ï¿½ï¿½Ò»Ö±ï¿½ï¿½ï¿½ï¿½
                    socket = mmServerSocket.accept();
                } catch (IOException e) {
                    Log.e(TAG, "accept() failed", e);
                    break;
                }
                // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
                if (socket != null) {
                    synchronized (BluetoothSharingService.this) {
                        switch (mState) {
                        case STATE_LISTEN:
                        case STATE_CONNECTING:
                            // ï¿½ï¿½ï¿½ï¿½Í¨Ñ¶ï¿½ï¿½ï¿½ï¿½
                            communication(socket, socket.getRemoteDevice());
                            break;
                        case STATE_NONE:
                        case STATE_CONNECTED:
                            try {
                                socket.close();
                            } catch (IOException e) {
                                Log.e(TAG, "Could not close unwanted socket", e);
                            }
                            break;
                        }
                    }
                }
            }
            if (D) Log.i(TAG, "END mAcceptThread");
        }

        public void cancel() {
            if (D) Log.d(TAG, "cancel " + this);
            try {
                mmServerSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of server failed", e);
            }
        }
    }


    /**
     * ï¿½ï¿½ï¿½ï¿½ï¿½â²¿ï¿½è±¸ï¿½ß³ï¿½
     */
    private class ConnectThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final BluetoothDevice mmDevice;

        public ConnectThread(BluetoothDevice device) {
            mmDevice = device;
            BluetoothSocket tmp = null;

            // ï¿½ï¿½È¡BluetoothSocket Îªï¿½ËºÍºÍ¸ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½è±¸ï¿½ï¿½ï¿½ï¿½
            try {
                tmp = device.createRfcommSocketToServiceRecord(MY_UUID);
            } catch (IOException e) {
                Log.e(TAG, "create() failed", e);
            }
            mmSocket = tmp;
        }

        public void run() {
            Log.i(TAG, "BEGIN mConnectThread");
            setName("ConnectThread");

            // Îªï¿½Ë²ï¿½Ó°ï¿½ï¿½ï¿½Ù¶È£ï¿½È¡ï¿½ï¿½Ñ°ï¿½ï¿½
            mAdapter.cancelDiscovery();

            // ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½BluetoothSocketï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
            try {
                // Ö±ï¿½ï¿½ï¿½ï¿½ï¿½Ø£ï¿½ï¿½ï¿½ï¿½ï¿½Ò»Ö±ï¿½ï¿½ï¿½ï¿½
                mmSocket.connect();
            } catch (IOException e) {
                connectionFailed();
                // ï¿½Ø±ï¿½
                try {
                    mmSocket.close();
                } catch (IOException e2) {
                    Log.e(TAG, "unable to close() socket during connection failure", e2);
                }
                // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
                BluetoothSharingService.this.start();
                return;
            }
            // ï¿½ï¿½ï¿½ï¿½
            synchronized (BluetoothSharingService.this) {
                mConnectThread = null;
            }
            // ï¿½ï¿½ï¿½ï¿½Í¨Ñ¶
            communication(mmSocket, mmDevice);
        }

        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of connect socket failed", e);
            }
        }
    }

    /**
     * Í¨Ñ¶ï¿½ß³ï¿½
     */
    private class CommunicationThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;
        boolean isconn  = true;
        public CommunicationThread(BluetoothSocket socket) {
            Log.d(TAG, "create ConnectedThread");
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;
            
            
            
            // ï¿½ï¿½È¡ï¿½ï¿½
            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) {
                Log.e(TAG, "temp sockets not created", e);
            }
            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }

        public void run() {
            Log.i(TAG, "BEGIN mCommunicationThread");
            // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
            while (true) {
            	if(isconn){
            		try {
                		//ï¿½ï¿½ï¿½ï¿½
                		if(/*SocketIsConn(mmSocket)*/true){//ï¿½Ç·ï¿½ï¿½ï¿½ï¿½ï¿½
                			if(true){//ï¿½Ð¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½mmInStream.available()>0
                				Bundle bundle = ReadData(mmInStream);//ï¿½ï¿½È¡ï¿½ï¿½ï¿½Ý£ï¿½ï¿½ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½ï¿½Ð¶ï¿½ï¿½ï¿½ï¿½ï¿½×´Ì¬
                				if(bundle!=null){
                					mHandler.obtainMessage(Cconst.MESSAGE_READ, bundle).sendToTarget();
            	            		bundle = null;
                				}else{
                					connectionLost();
            	            		break;
                				}
                			}else{
                				sleep(50);
                				continue;
                			}
                		}else{
                			connectionLost();
    	            		break;
                		}
    				}/* catch (IOException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    					break;
    					//connectionLost();
    				}*/ catch (InterruptedException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				}
            	}else{
            		try {
						sleep(100);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
            		continue;
            	}
            	
            }
        }

        /**
         * Ð´ï¿½ï¿½ï¿½Ýµï¿½ï¿½ï¿½ï¿½ï¿½ï¿?.
         * @param buffer  ï¿½ï¿½ï¿½ï¿½
         */
        public void write(byte[] buffer) {
        	isconn = false;
        	
            try {
                mmOutStream.write(buffer);
                //mmOutStream.flush();
                // ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ï¢
                Bundle b = ParseData(buffer);
                mHandler.obtainMessage(Cconst.MESSAGE_WRITE, -1, -1, b)
                .sendToTarget();
                
                
                /*
                Bundle msgb = new Bundle();
                int type = -1;
                
                String msg = "";
                if(b.getInt(Cconst.DATA_TYPE,-1)==Cconst.TYPE_FILE){
                	
                	type = Cconst.MSG_TYPE_FILE;
                	msgb.putString(Cconst.DATA_FILENAME, b.getString(Cconst.DATA_ATTR));
                	
                	//msg = "ï¿½Ä¼ï¿½ï¿½ï¿½"+b.getString(Cconst.DATA_ATTR)+"ï¿½ï¿½ï¿½Í³É¹ï¿½ï¿½ï¿½";
                }else if(b.getInt(Cconst.DATA_TYPE,-1)==Cconst.TYPE_COMMONDATA){
                	//Log.i("Data",new String(b.getByteArray(Cconst.DATA_ATTR)));
                	if(b.getString(Cconst.DATA_ATTR).equals(Cconst.ATTR_STRUCT))
                	{
                		type = Cconst.MSG_TYPE_STRUCT;
                		
                		msg = "ï¿½ï¿½Æ¬ï¿½ï¿½ï¿½Í³É¹ï¿½ï¿½ï¿½";
                	}else{
                		//msg = new String(b.getByteArray(Cconst.DATA_DATA));
                		type = Cconst.MSG_TYPE_COMMDATA;
                		msgb.putString(Cconst.DATA_DATA, new String(b.getByteArray(Cconst.DATA_DATA)));
                	}
                }
                msgb.putInt(Cconst.DATA_TYPE, type);
                
                mHandler.obtainMessage(Cconst.MESSAGE_WRITE, -1, -1, msgb)
                        .sendToTarget();*/
            } catch (IOException e) {
                Log.e(TAG, "Exception during write", e);
                e.printStackTrace();
                connectionLost();
            }
            isconn = true;
        }

        public void cancel() {
            try {

            	//mmInStream.close();
            	//mmOutStream.close();
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of connect socket failed", e);
            }
        }
    }
}
